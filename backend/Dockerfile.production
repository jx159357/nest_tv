# =============================================================================
# Nest TV 后端 Dockerfile
# =============================================================================

# 构建阶段：使用 Node 18 镜像
FROM node:18-alpine AS base

# 安装必要的系统依赖
RUN apk add --no-cache \
    python3 \
    py3-pip \
    && rm -rf /var/cache/apk/*

# 设置工作目录
WORKDIR /app

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 安装依赖
RUN npm ci --only=production

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# =============================================================================
# 生产阶段：使用小体积的基础镜像
# =============================================================================
FROM node:18-alpine AS production

# 安装必要的系统依赖和运行时依赖
RUN apk add --no-cache \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 创建应用用户和组
RUN addgroup -g 1000 -S nodejs && \
    adduser -S nextjs -u 1000 -G nodejs

# 设置工作目录
WORKDIR /app

# 复制构建产物和依赖文件
COPY --from=base --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=base --chown=nextjs:nodejs /app/dist ./dist
COPY --from=base --chown=nextjs:nodejs /app/package.json ./package.json

# 创建必要的目录
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nextjs:nodejs /app/uploads /app/logs

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node healthcheck.js

# 启动命令
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# 使用 nextjs 用户运行应用
CMD ["npm", "start"]